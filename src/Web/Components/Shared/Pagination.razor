@using Web.Components.Models.Shared
<nav aria-label="pagination" class="float-end">
    <ul class="pagination justify-content-center">
        <li class="page-item @(HasPreviousPage ? "" : "disabled")">
            <button class="page-link" @onclick="() => PageChange.InvokeAsync(CurrentPage - 1)">
                <i class="fa-solid fa-chevron-left"></i>
            </button>
        </li>
    
        @foreach(var pageNumber in GetVisiblePages())
        {
            <li class="@(CurrentPage == pageNumber ? "page-item active" : "page-item")">
                <button class="page-link" @onclick="() => PageChange.InvokeAsync(pageNumber)">@pageNumber</button>
            </li>
        }
        
        <li class="page-item @(HasNextPage ? "" : "disabled")">
            <button class="page-link" @onclick="() => PageChange.InvokeAsync(CurrentPage + 1)">
                <i class="fa-solid fa-chevron-right"></i>
            </button>       
        </li>
    </ul>
</nav>

@code {
    [Parameter] public int CurrentPage { get; set; }
    [Parameter] public int PageSize { get; set; }
    [Parameter] public int TotalRecords { get; set; }
    [Parameter] public bool HasNextPage { get; set; }
    [Parameter] public bool HasPreviousPage { get; set; }
    [Parameter] public EventCallback<int> PageChange { get; set; }
    
    private IEnumerable<int> Pages => Enumerable.Range(1, TotalPages);
    private int TotalPages => (int)Math.Ceiling(Convert.ToDouble(TotalRecords) / PageSize);

    private IEnumerable<int> GetVisiblePages()
    {
        var startPage = CurrentPage - PaginationDefault.BlockSize / 2;
        if(startPage < 1)
        {
            startPage = 1;
        }
        
        var lastPage = startPage + PaginationDefault.BlockSize - 1;
        if (lastPage > TotalPages)
        {
            lastPage = TotalPages;
        }

        if (lastPage - startPage < PaginationDefault.BlockSize - 1)
        {
            startPage = lastPage - (PaginationDefault.BlockSize - 1);
            startPage = startPage < 1 ? 1 : startPage;
        }

        if (lastPage - startPage > PaginationDefault.BlockSize - 1)
        {
            lastPage = startPage + (PaginationDefault.BlockSize - 1);
        }
        
        for (var i = startPage; i <= lastPage; i++)
        {
            yield return i;
        }
    }
}